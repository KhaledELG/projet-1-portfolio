workflow:
  name: $CI_COMMIT_MESSAGE
  rules:
    - if: $CI_PIPELINE_SOURCE == 'web'

stages:
  - release
  - npm_build
  - docker_build
  - deploy

variables:
  PUBLIC_IP:
    description: "PUBLIC_IP"
    value: ""

semantic_release:release:
  stage: release
  image:
    name: node:18.18.2-bullseye
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
  variables:
    GIT_CREDENTIALS: "${GITLAB_USERNAME}:${GITLAB_TOKEN}"
  before_script:
    - |
      echo "===== GitLab CI/CD | Semantic release ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Running semantic-release..."
  script:
    - npm install -g semantic-release @semantic-release/gitlab@v12.0.3 @semantic-release/changelog conventional-changelog-conventionalcommits @semantic-release/commit-analyzer @semantic-release/git
    - semantic-release
    - |
      IMAGE_TAG=$(cat CHANGELOG.md | head -10 | awk '/^## [0-9]+\.[0-9]+\.[0-9]+/ {print $2}')
      echo "IMAGE_TAG=$IMAGE_TAG" > build.env
  after_script:
    - |
      echo "[INFO] Semantic release done!"
  artifacts:
    reports:
      dotenv: build.env

feat_release:release:
  stage: release
  image:
    name: node:18.18.2-bullseye
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^feat/
  before_script:
    - |
      echo "===== GitLab CI/CD | Feat release ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
  script:
    - echo "IMAGE_TAG=$CI_PIPELINE_ID" > build.env
  after_script:
    - |
      echo "[INFO] Feat release set!"
  artifacts:
    reports:
      dotenv: build.env

npm_build:
  stage: npm_build
  image: 
    name: node:15.12-alpine3.13
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
    - if: $CI_COMMIT_REF_NAME =~ /^feat/
  before_script:
    - |
      echo "===== GitLab CI/CD | NPM Build ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Building the website..."
  script:
    - |
      cd website
      npm install --force
      npm run build
      mv ./build ../public
  after_script:
    - |
      echo "[INFO] NPM build complete!"
  artifacts:
    paths:
    - public
    expire_in: 1h

docker_build:
  stage: docker_build
  image:
    name: docker:24.0.5
    entrypoint: [""]
  services:
    - name: docker:24.0.5-dind
      alias: dind
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
    - if: $CI_COMMIT_REF_NAME =~ /^feat/
  variables:
    DOCKER_HOST: tcp://dind:2375
    GITHUB_HOST: ghcr.io/khaledelg
    APP_NAME: portfolio
  before_script:
    - |
      echo "===== GitLab CI/CD | Docker Build ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Creating Docker image..."
  script:
    - |
      mkdir ~/.docker
      echo "{\"auths\":{\"${GITHUB_HOST}\":{\"auth\":\"$(printf "%s:%s" "${GITHUB_USERNAME}" "${GITHUB_TOKEN}" | base64 | tr -d '\n')\"}}}" > ~/.docker/config.json
    - |
      docker build -f deployment/docker/Dockerfile -t ${GITHUB_HOST}/${APP_NAME}:${IMAGE_TAG} .
      docker push ${GITHUB_HOST}/${APP_NAME}:${IMAGE_TAG}
  after_script:
    - |
      echo "[INFO] Docker build and push complete!"
      echo "[INFO] Docker image available: ${GITHUB_HOST}/${APP_NAME}:${IMAGE_TAG}"

pages:deploy:
  stage: deploy
  image: 
    name: node:15.12-alpine3.13
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'develop'
  before_script:
    - |
      echo "===== GitLab CI/CD | Pages ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Building the website..."
  script:
    - |
      cd website
      npm install --force
      npm run build
      mv ./build ../public
  after_script:
    - |
      echo "[INFO] Website build complete!"
      echo "[INFO] Page available here: https://portfolio-kelg-linkedin-projet-1-b4308f23eeb718e75fc393a8db4bff.gitlab.io/"
  artifacts:
    paths:
    - public
    expire_in: 1h

kubernetes:kubeconfig:
  stage: deploy
  image: 
    name: linuxserver/openssh-server:latest
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
  before_script:
    - |
      echo "===== GitLab CI/CD | KubeConfig ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Retrieving the KubeConfig..."
  script:
    - |
      mkdir ~/.ssh
      touch ~/.ssh/id_rsa
      echo -e "$AWS_EC2_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      touch ~/.ssh/config
      echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - |
      scp $AWS_SSH_USER@$PUBLIC_IP:~/.kube/config config
      chmod 644 config
  after_script:
    - |
      echo "[INFO] KubeConfig retrieved!"
  artifacts:
    paths:
    - config
    expire_in: 1h

kubernetes:deploy:
  stage: deploy
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
  needs: ["semantic_release:release","kubernetes:kubeconfig"]
  before_script:
    - |
      echo "===== GitLab CI/CD | Kubernetes ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Deploying the application in the Kubernetes cluster..."
  script:
    - cp config ~/.kube/config
    - export KUBECONFIG=~/.kube/config
    -  sed -i "s|IMAGE_TAG|${IMAGE_TAG}|g" deployment/kubernetes/portfolio-conf.yml
    - kubectl apply -f deployment/kubernetes/portfolio-conf.yml
  after_script:
    - |
      echo "[INFO] Application deployed!"
