workflow:
  name: $CI_COMMIT_MESSAGE
  rules:
    - if: $CI_PIPELINE_SOURCE == 'web'

stages:
  - decrypt
  - release
  - npm_build
  - docker_build
  - deploy

variables:
  ANSIBLE_VAULT_PASS:
    description: "ANSIBLE_VAULT_PASS"
    value: ""
  AWS_EC2_CURRENT_IP:
    description: "AWS_EC2_CURRENT_IP"
    value: ""

decrypt:
  stage: decrypt
  image:
    name: registry.hub.docker.com/cytopia/ansible:latest-tools
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
  before_script:
    - |
      echo "===== GitLab CI/CD | Ansible ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Decrypting secrets..."
  script:
    - ansible-vault decrypt secrets.txt --vault-password-file <(echo "${ANSIBLE_VAULT_PASS}")
  after_script:
    - |
      echo "[INFO] Secrets decrypted!"
  artifacts:
    reports:
      dotenv: secrets.txt

semantic_release:release:
  stage: release
  image:
    name: node:18.18.2-bullseye
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
  variables:
    GIT_CREDENTIALS: "${PROJECT_ACCESS_USER}:${PROJECT_ACCESS_TOKEN}"
  before_script:
    - |
      echo "===== GitLab CI/CD | Semantic release ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Running semantic-release..."
  script:
    - npm install -g semantic-release @semantic-release/gitlab@v12.0.3 @semantic-release/changelog conventional-changelog-conventionalcommits @semantic-release/commit-analyzer @semantic-release/git
    - semantic-release
    - |
      IMAGE_TAG=$(curl -skL -H "Authorization: Bearer ${GL_TOKEN}" -X GET "https://gitlab.com/kelg/linkedin/projet-1/portfolio/-/blob/main/CHANGELOG.md?ref_type=heads"  | grep "Release " | awk -F 'Release ' '{print $2}' | awk -F '</a>' '{print $1}')
      echo "IMAGE_TAG=$IMAGE_TAG" > build.env
  after_script:
    - |
      echo "[INFO] Semantic release done!"
  artifacts:
    reports:
      dotenv: build.env

feat_release:release:
  stage: release
  image:
    name: node:18.18.2-bullseye
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^feat/
  before_script:
    - |
      echo "===== GitLab CI/CD | Feat release ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
  script:
    - echo "IMAGE_TAG=$CI_PIPELINE_ID" > build.env
  after_script:
    - |
      echo "[INFO] Feat release set!"
  artifacts:
    reports:
      dotenv: build.env

npm_build:
  stage: npm_build
  image: 
    name: node:15.12-alpine3.13
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
    - if: $CI_COMMIT_REF_NAME =~ /^feat/
  before_script:
    - |
      echo "===== GitLab CI/CD | NPM Build ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Building the website..."
  script:
    - |
      cd website
      npm install --force
      npm run build
      mv ./build ../public
  after_script:
    - |
      echo "[INFO] NPM build complete!"
  artifacts:
    paths:
    - public
    expire_in: 1h

docker_build:
  stage: docker_build
  image:
    name: docker:24.0.5
    entrypoint: [""]
  services:
    - name: docker:24.0.5-dind
      alias: dind
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
    - if: $CI_COMMIT_REF_NAME =~ /^feat/
  variables:
    DOCKER_HOST: tcp://dind:2375
    APP_NAME: portfolio
  before_script:
    - |
      echo "===== GitLab CI/CD | Docker Build ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Creating Docker image..."
  script:
    - |
      mkdir ~/.docker
      echo "{\"auths\":{\"${CI_GITHUB_HOST}\":{\"auth\":\"$(printf "%s:%s" "${CI_GITHUB_USER}" "${CI_GITHUB_TOKEN}" | base64 | tr -d '\n')\"}}}" > ~/.docker/config.json
    - |
      docker build -f deployment/docker/Dockerfile -t ${CI_GITHUB_HOST}/${APP_NAME}:${IMAGE_TAG} .
      docker push ${CI_GITHUB_HOST}/${APP_NAME}:${IMAGE_TAG}
  after_script:
    - |
      echo "[INFO] Docker build and push complete!"
      echo "[INFO] Docker image available: ${CI_GITHUB_HOST}/${APP_NAME}:${IMAGE_TAG}"

pages:deploy:
  stage: deploy
  image: 
    name: node:15.12-alpine3.13
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'develop'
  before_script:
    - |
      echo "===== GitLab CI/CD | Pages ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Building the website..."
  script:
    - |
      cd website
      npm install --force
      npm run build
      mv ./build ../public
  after_script:
    - |
      echo "[INFO] Website build complete!"
      echo "[INFO] Page available here: https://portfolio-kelg-linkedin-projet-1-b4308f23eeb718e75fc393a8db4bff.gitlab.io/"
  artifacts:
    paths:
    - public
    expire_in: 1h

kubernetes:kubeconfig:
  stage: deploy
  image: 
    name: linuxserver/openssh-server:latest
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
  before_script:
    - |
      echo "===== GitLab CI/CD | KubeConfig ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Retrieving the KubeConfig..."
  script:
    - |
      mkdir ~/.ssh
      touch ~/.ssh/id_rsa
      echo -e "$AWS_EC2_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      touch ~/.ssh/config
      echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - |
      scp $AWS_SSH_USER@$AWS_EC2_CURRENT_IP:~/.kube/config config
      chmod 644 config
  after_script:
    - |
      echo "[INFO] KubeConfig retrieved!"
  artifacts:
    paths:
    - config
    expire_in: 1h

kubernetes:deploy:
  stage: deploy
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_REF_NAME == 'main'
  needs: ["semantic_release:release","kubernetes:kubeconfig"]
  before_script:
    - |
      echo "===== GitLab CI/CD | Kubernetes ====="
      echo "[INFO] Project name: ${CI_PROJECT_NAME} -- Branch: ${CI_COMMIT_BRANCH} -- Tag: ${CI_COMMIT_TAG}"
      echo "[INFO] Deploying the application in the Kubernetes cluster..."
  script:
    - cp config ~/.kube/config
    - export KUBECONFIG=~/.kube/config
    -  sed -i "s|IMAGE_TAG|${IMAGE_TAG}|g" deployment/kubernetes/portfolio-conf.yml
    - kubectl apply -f deployment/kubernetes/portfolio-conf.yml
  after_script:
    - |
      echo "[INFO] Application deployed!"
